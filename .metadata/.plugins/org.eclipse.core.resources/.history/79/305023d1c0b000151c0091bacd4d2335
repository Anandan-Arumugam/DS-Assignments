package com.graphs.anandan;

import java.util.ArrayList;
import java.util.Stack;

public class Graph {
	
	private ArrayList<Vertex> vertices;
	private int vertexCount;
	private int edgeWeightMatrix[][];
	
	public Graph(int n){
		vertexCount=n;
		vertices=new ArrayList<Vertex>(vertexCount);
		for(int i=0;i<vertexCount;i++){
			for(int j=0;j<vertexCount;j++){
				edgeWeightMatrix[i][j]=0;
			}
		}
	}
	
	public void addVertex(char label){
		Vertex newVertex=new Vertex(label);
		vertices.add(newVertex);
	}
	
	public void addEdge(char source, char destination, int weight){
		int i=getVertexIndex(source);
		int j=getVertexIndex(destination);
		edgeWeightMatrix[i][j]=weight;
	}

	private int getVertexIndex(char lab) {
		int i=0;
		while (vertices.get(i).getLabel()==lab){
			i++;
		}
		return i;
	}
	
	public void dfs(){
		
	}
	
	public void depthFirstSearch(){
		Stack<Character> vertexLabel=new Stack<Character>();
//		Stack<int[]> sumLabel=new Stack<int[]>();
		int i=0;
		vertexLabel.push(vertices.get(i).getLabel());
		System.out.println(vertices.get(i).getLabel());
		while (vertexLabel.isEmpty()){
			int j=0;
			while(j<=vertexCount){
				if(edgeWeightMatrix[getVertexIndex(vertexLabel.peek())][j]!=0 && (!(vertices.get(getVertexIndex(vertexLabel.peek())).isVisited()))){
					vertexLabel.push(vertices.get(j).getLabel());
					System.out.println(vertices.get(j).getLabel());
				}
			}
		}
	}

}
